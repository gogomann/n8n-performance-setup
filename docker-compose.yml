version: "3.8"

# ======================================================
# High-Performance n8n Setup mit Queue-Mode & Workern
# ======================================================
# 
# Architektur:
#   - PostgreSQL: Persistente Datenbank
#   - Redis: Queue-Management
#   - n8n-main: Web-UI + Webhook-Empfang
#   - n8n-worker-1/2: Reine Workflow-Ausführung
#
# Skalierung:
#   Weitere Worker hinzufügen durch Duplizieren der
#   worker-Services (n8n-worker-3, -4, etc.)
# ======================================================

services:
  # ============================================
  # PostgreSQL Datenbank
  # ============================================
  postgres:
    image: postgres:15
    container_name: n8n_postgres
    environment:
      # Konfigurierbar über .env
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD nicht gesetzt!}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    ports:
      # Nur bei Bedarf exponieren (z.B. für externe Tools)
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      # Persistenter Storage für Datenbank
      - ${POSTGRES_DATA_PATH:-./data/postgres}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - n8n-network

  # ============================================
  # Redis Queue
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    command: [
      "redis-server",
      # Snapshot: Speichere alle 60 Sekunden bei mind. 1 Änderung
      "--save", "60", "1",
      # AOF: Append-Only File für Persistierung
      "--appendonly", "yes",
      # Max RAM für Queue-Daten (anpassen je nach Workload!)
      "--maxmemory", "${REDIS_MAX_MEMORY:-256mb}",
      # Eviction Policy: LRU (Least Recently Used)
      "--maxmemory-policy", "allkeys-lru"
    ]
    volumes:
      # Persistenter Storage für Redis-Daten
      - ${REDIS_DATA_PATH:-./data/redis}:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - n8n-network

  # ============================================
  # n8n Main Instance (UI + Webhooks)
  # ============================================
  n8n-main:
    image: n8nio/n8n:latest
    container_name: n8n_main
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      # -------------------- Basis --------------------
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_PORT: ${N8N_PORT:-5678}
      N8N_SECURE_COOKIE: ${N8N_SECURE_COOKIE:-false}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      
      # -------------------- Datenbank (PostgreSQL) --------------------
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # -------------------- Queue-Mode (Redis) --------------------
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      # Optional: Redis-Passwort (falls gesetzt)
      # QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # -------------------- Verschlüsselung --------------------
      # WICHTIG: Muss für Main + alle Worker IDENTISCH sein!
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:?N8N_ENCRYPTION_KEY nicht gesetzt!}
      
      # -------------------- Performance & Logging --------------------
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      N8N_METRICS: ${N8N_METRICS:-true}
      
      # -------------------- Execution Settings --------------------
      EXECUTIONS_TIMEOUT: ${EXECUTIONS_TIMEOUT:-300000}
      EXECUTIONS_TIMEOUT_MAX: ${EXECUTIONS_TIMEOUT_MAX:-3600000}
      
      # -------------------- Data Retention --------------------
      EXECUTIONS_DATA_PRUNE: ${EXECUTIONS_DATA_PRUNE:-true}
      EXECUTIONS_DATA_MAX_AGE: ${EXECUTIONS_DATA_MAX_AGE:-336}
      
      # -------------------- Berechtigungen --------------------
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      # Web-UI Port (anpassen falls notwendig)
      - "${N8N_EXTERNAL_PORT:-5678}:5678"
    volumes:
      # Persistenter Storage für Credentials, Workflows, etc.
      - ${N8N_DATA_PATH:-./data/n8n}:/home/node/.n8n
    restart: unless-stopped
    networks:
      - n8n-network

  # ============================================
  # n8n Worker 1
  # ============================================
  n8n-worker-1:
    image: n8nio/n8n:latest
    container_name: n8n_worker_1
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      # -------------------- Queue-Mode --------------------
      EXECUTIONS_MODE: queue
      
      # -------------------- Datenbank (PostgreSQL) --------------------
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # -------------------- Redis --------------------
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      # Optional: Redis-Passwort (falls gesetzt)
      # QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # -------------------- Verschlüsselung --------------------
      # WICHTIG: Muss identisch mit Main sein!
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      
      # -------------------- Webhooks (für Webhook-Nodes in Workflows) --------------------
      N8N_HOST: ${N8N_HOST:-localhost}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      
      # -------------------- Berechtigungen --------------------
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      
      # -------------------- Logging --------------------
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Worker-Modus mit Concurrency
    # Concurrency = Anzahl paralleler Workflow-Ausführungen
    entrypoint: ["n8n", "worker", "--concurrency=${WORKER_CONCURRENCY:-5}"]
    volumes:
      # Shared Storage mit Main (für Credentials, etc.)
      - ${N8N_DATA_PATH:-./data/n8n}:/home/node/.n8n
    restart: unless-stopped
    networks:
      - n8n-network

  # ============================================
  # n8n Worker 2
  # ============================================
  n8n-worker-2:
    image: n8nio/n8n:latest
    container_name: n8n_worker_2
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      # Identisch zu Worker-1
      EXECUTIONS_MODE: queue
      
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      
      N8N_HOST: ${N8N_HOST:-localhost}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: ["n8n", "worker", "--concurrency=${WORKER_CONCURRENCY:-5}"]
    volumes:
      - ${N8N_DATA_PATH:-./data/n8n}:/home/node/.n8n
    restart: unless-stopped
    networks:
      - n8n-network

# ============================================
# Netzwerk-Definition
# ============================================
networks:
  n8n-network:
    driver: bridge
    name: n8n_network